USEFULNESS OF EGON AS A DETECTOR OF MODULARITY

Running the egon program with 1%, 5% and 10% thresholds  seems to really find divine classes which establishes the modularity of a Java program. In Modularity, class should loosely coupled with each other so as to allow for easy expansion. Also with programming, code - in this case, classes - can grow so fast and get out of control in management and become so large to debug. Also when working in a team, we expect any new joiners to be able to understand the existing code with much ease.

Egon program in this case will be able to identify the divine classes and programmers can look at the them and come up with ways to rewrite them enforcing the core principles of object oriented programming such as encapsulation, abstraction, inheritance and polymorphism. With all these god-classes solved, the code will become easier to manage and debug. Spaghetti code will be avoided and writing unit tests will so easier. Errors and other bugs will be easily located rather than having so many classes calling each other, which will make the debugging process a nightmare. To summarize, the egon classes won't just act as a tool to find divine classes, but will help software developers to write better code by enforcing object-oriented programming concepts and coupling between functionalities.

How to improve the egon program.

As we know, all software needs to be developed continously and we can always say that a software is "never complete". So in terms of this software, there could several things, like features and functionalities that can be added. Just from the look of it, as per now, we can improve the following
1. Optimizing reading and scanning of files - some files can be so large. And IO streams are usually slow and blocking processes, which usually make the software execution to be slow. There could be a way in which we can view packages, classes and imports in a particular file without having necessary to open the file and read it
2. Accelerating the program with C++ or other low level languages - C++ runs so fast compared to Python and Java. This tool maybe used to test a huge project, which involves millions of lines of code or millions of file. It'll definitely take sometime to run. But with C++, we can optimize the os python library and this will result in faster execution 

There could be much more that could be done to improve this software in its entire life cycle. But this would be it for now.
